<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-cn"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://zhaoqinlao.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://zhaoqinlao.github.io/" rel="alternate" type="text/html" hreflang="zh-cn"/><updated>2025-03-02T12:26:08+00:00</updated><id>https://zhaoqinlao.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html"></title><link href="https://zhaoqinlao.github.io/blog/2025/2025-03-02-salloc%E9%83%A8%E7%BD%B2deepseek/" rel="alternate" type="text/html" title=""/><published>2025-03-02T12:26:08+00:00</published><updated>2025-03-02T12:26:08+00:00</updated><id>https://zhaoqinlao.github.io/blog/2025/2025-03-02-salloc%E9%83%A8%E7%BD%B2deepseek</id><content type="html" xml:base="https://zhaoqinlao.github.io/blog/2025/2025-03-02-salloc%E9%83%A8%E7%BD%B2deepseek/"><![CDATA[<p>该文件是对在华科hpc使用salloc部署deepseek的一个补充</p> <blockquote> <p>https://mp.weixin.qq.com/s/E8jV450Y42YbTBfPxR813g</p> </blockquote> <ul> <li>申请gpu计算节点：用salloc方式申请公共集群计算资源。</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 指定gpu分区，申请1张gpu卡、8个cpu核心,使用项目账户扣费
salloc -p gpu --gres=gpu:1 -n 8 --comment=your_project_name
</code></pre></div></div> <ul> <li>运行Ollama服务：申请好计算资源后，先登录到计算节点。例如，分配了gpu4</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh gpu4
</code></pre></div></div> <ul> <li>设置相应环境变量，并启动 ollama 服务。</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 启动一个session
screen -S serve
export OLLAMA_MODELS="/opt/app/ollama/0.5.7/models"
export PATH=$PATH:/opt/app/ollama/0.5.7/bin
ollama serve
# 稍作等待，确认ollama 开始工作
# Ctrl + a, d 离开session
</code></pre></div></div> <ul> <li> <p>这时候可以用<code class="language-plaintext highlighter-rouge">nvidia-smi</code>确认一下显存占用</p> </li> <li> <p>运行DeepSeek模型：打开一个新的ssh窗口，并在计算节点运行下面的命令，开始对话。</p> </li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export PATH=$PATH:/opt/app/ollama/0.5.7/bin
ollama list
ollama run deepseek-r1:32b
</code></pre></div></div> <ul> <li>开始对话，可以研究一下怎么保存输出到文件，记得记录输入和输出对</li> <li>关闭salloc分配的节点：退出ssh连接到的资源</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Ctrl + D
</code></pre></div></div> <ul> <li>关闭资源：以下命令关闭你用户名下的所有资源，注意不是引号</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scancel -u `whoami`
</code></pre></div></div> <ul> <li>可以用<code class="language-plaintext highlighter-rouge">squeue</code>确认，也可以查看企业微信的通知</li> </ul>]]></content><author><name></name></author></entry><entry><title type="html">TAS Survey</title><link href="https://zhaoqinlao.github.io/blog/2025/Temporal-Action-Segmentation-An-Analysis-of-Modern-Techniques/" rel="alternate" type="text/html" title="TAS Survey"/><published>2025-01-20T15:20:48+00:00</published><updated>2025-01-20T15:20:48+00:00</updated><id>https://zhaoqinlao.github.io/blog/2025/Temporal%20Action%20Segmentation%20An%20Analysis%20of%20Modern%20Techniques</id><content type="html" xml:base="https://zhaoqinlao.github.io/blog/2025/Temporal-Action-Segmentation-An-Analysis-of-Modern-Techniques/"><![CDATA[<h1 id="temporal-action-segmentation-an-analysis-of-modern-techniques">Temporal Action Segmentation An Analysis of Modern Techniques</h1> <p>时序动作分割：分钟长的视频的密集分割</p> <p>任务定义、共同基准、监督类型和普遍的评估措施</p> <p>主要探究<strong>帧表示</strong>和<strong>时间建模</strong></p> <p>分类法：监督级别</p> <h2 id="1-导言">1. 导言</h2> <p>作者认为时间分割是语义分割在时间维度的模拟</p> <p>时间分割主要的任务/作用：正在执行哪些行动、何时开始、进展到什么程度、这些行动如何改变环境，人们下一步将做什么</p> <p>与传统基于几秒钟的视频分析动作的方式不同的是，现实中许多活动的持续时间会超出秒级别，达到分钟级别</p> <p>任务通常有较为松散的任务图（任务顺序）</p> <p>找到动作边界：1. 学习有区别的帧级表示 2. 对动作之间的时间和顺序关系进行建模</p> <blockquote> <p>动作的排序特征提出了一个基本问题 - 如何对时间或顺序关系进行建模以解释动作重复、持续时间和顺序变化？</p> </blockquote> <p>现有的综述包括：动作识别，时间动作定位，动作预测</p> <p>在此过程中，它引入了重复和顺序变化分数，这两个指标表征了动作的时间动态。</p> <blockquote> <p>分析表明，大多数现有数据集在动作重复和顺序变化方面受到限制。此外，还区分了几种性能评估和比较设置。为无监督分割方法提供了标准化的评估设置，以及强调长尾分布的基于类别的评估指标。最后，提出了一些有趣的未来领域和问题供社区调查。</p> </blockquote> <p><img src="C:\Users\Fitz_Joye\AppData\Roaming\Typora\typora-user-images\image-20250120161149653.png" alt="image-20250120161149653" style="zoom:67%;"/></p> <h2 id="2-动作分割入门知识">2. 动作分割入门知识</h2> <h3 id="21-定义">2.1 定义</h3> <p>不同的形式化方式给出了不同的看待任务的视角：</p> <p>将其视为分段任务，从而以时间片段的角度看待任务</p> <p>将其看作帧分类任务，从而以逐帧分类的角度看待</p> <p>（从语义分割的掩码生成角度，或许我们可以有新的分割方式作为参考）</p> <h4 id="221-相关任务">2.2.1 相关任务</h4> <p>任务分类依据：数据域、片段语义识别 以及 片段之间时间动态的推理</p> <h3 id="22-数据集">2.2 数据集</h3> <blockquote> <p>突出显示当前未使用的密切相关的程序视频数据集。</p> </blockquote> <p><img src="C:\Users\Fitz_Joye\AppData\Roaming\Typora\typora-user-images\image-20250120222930151.png" alt="image-20250120222930151"/></p> <p><strong>GTEA</strong> 第一视角</p> <p><strong>50Salads</strong> 根据预定脚本执行</p> <p><strong>YouCookII</strong> 视频的描述，而非动作标签，可以考虑通用动作分割？</p> <h4 id="数据集分析">数据集分析</h4> <p>固定视角可以根据变化判断动作造成的影响，但动态视角提出了更高的挑战</p> <h4 id="时间动态性">时间动态性</h4> <blockquote> <p>重复分数和顺序变化分数</p> </blockquote> <p><img src="C:\Users\Fitz_Joye\AppData\Roaming\Typora\typora-user-images\image-20250121142636697.png" alt="image-20250121142636697" style="zoom: 67%;"/></p> <h4 id="动作的长尾分布">动作的长尾分布</h4> <p>用于描述逐帧分类方法中，每个动作持续总时间长短的不平衡</p> <p><img src="C:\Users\Fitz_Joye\AppData\Roaming\Typora\typora-user-images\image-20250121144354602.png" alt="image-20250121144354602" style="zoom:50%;"/></p> <p>偏斜度</p> <p><img src="C:\Users\Fitz_Joye\AppData\Roaming\Typora\typora-user-images\image-20250121144843597.png" alt="image-20250121144843597" style="zoom:50%;"/></p> <h3 id="23-监督">2.3 监督</h3> <p>完全监督：有完整的逐帧标注</p> <p>半监督：部分数据有完整标注，剩下数据无标注或弱标注</p> <p>弱监督：有以下三种形式，逐次监督性减弱：1. 有每个动作的标志时间戳 2. 仅有动作序列 3. 仅有动作集（无序）4. 最近，[61]表明人们可以取消动作级注释，而简单地使用视频级复杂活动标签进行监督。</p> <p>无监督：提供动作集合，一次处理同一类视频，从中学习每个动作的匹配</p> <h3 id="24-评价">2.4 评价</h3> <p>有使用匈牙利匹配算法的无监督模型</p> <p>将一个动作分成许多不连续的子段称为<strong>过度分割</strong>，更适合通过Edit Score和F1来评估，逐帧的方法MoF(Acc)并不适合</p> <p>F1 分数和Edit Score都对过度分割有更大的惩罚</p> <p><img src="C:\Users\Fitz_Joye\AppData\Roaming\Typora\typora-user-images\image-20250121152001221.png" alt="image-20250121152001221"/></p> <h3 id="242-匈牙利匹配">2.4.2 匈牙利匹配</h3> <p>略，我们用到了再说（还挺有趣的</p> <h2 id="3-核心技术">3. 核心技术</h2> <p>逐帧表示（在帧级别提取信息特征以捕获空间外观和运动信息）以及时间和顺序建模（结合时间依赖性和顺序上下文以提高 TAS 准确性）</p> <h3 id="31-帧表示">3.1 帧表示</h3> <p>I3D：在Kinetics数据集上预训练，使用光流特征，RGB和光流各1024维，合并得到2048维</p> <p>TSM：未提及，可以看一下提取方法，同为2048维度</p> <h3 id="32-时间和序列建模">3.2 时间和序列建模</h3> <p>帧级别的视作时间建模，片段级别的视作序列建模</p> <p><strong>RNN</strong> 然而，逐帧 RNN 或 GRU 的记忆容量不够长，无法捕获动作之间的顺序关系。因此，所讨论的方法[11]、[79]通常与第3.2.2节中介绍的顺序建模技术相结合。而且RNN无法并行操作</p> <p><strong>TCN</strong> Encoder-Decoder形式 或 Multi-Stage形式</p> <p><strong>Transformer</strong> 缺乏归纳偏置，需要更大的数据集，但现有的数据集都太小了；另一个问题在于长序列下attention难以注意到有益的信息</p> <blockquote> <p>建议参考Vision transformers for action recognition: A survey</p> </blockquote> <h3 id="322-序列建模">3.2.2 序列建模</h3> <p>略，都是一些传统方法，似乎并不常用</p> <h3 id="323-过分割">3.2.3 过分割</h3> <p>动作应该是局部连续的</p> <p><strong>边界细化</strong> 在 MS-TCN 的后期阶段，使用新颖的局部屏障池操作来平滑具有置信度的边界预测</p> <p>**高斯平滑 **直接平滑或按顺序相似性计算</p> <p><strong>边界平滑</strong> 软边界</p> <p><img src="C:\Users\Fitz_Joye\AppData\Roaming\Typora\typora-user-images\image-20250121165934661.png" alt="image-20250121165934661" style="zoom:67%;"/></p> <h2 id="4-监督级别">4. 监督级别</h2> <h3 id="41-完全监督">4.1 完全监督</h3> <ol> <li>识别每帧的动作，使用后处理优化</li> <li>识别分割点</li> <li>还有一些</li> </ol> <h3 id="411-表示学习">4.1.1 表示学习</h3> <p>TCN，CNN+BiLSTM，ViT等</p> <h3 id="412-架构">4.1.2 架构</h3> <p><strong>TCN</strong>：隐式捕捉动作持续，成对转换，长程依赖</p> <p>后续的工作用TCN + BiLSTM</p> <p>ED-TCN：使用可变形卷积</p> <p>在encoder中，通常的方法会将视频下采样至几帧每秒</p> <table> <thead> <tr> <th>简称</th> <th>主要贡献</th> </tr> </thead> <tbody> <tr> <td>GatedR</td> <td>添加了一个门控的refine过程</td> </tr> <tr> <td>UVAST</td> <td>在ASFormer的基础上使用自回归结构；移除了逐帧预测；缓解过度分割</td> </tr> <tr> <td>TCTr</td> <td>同时使用TCN和TCTr以平衡性能和复杂度</td> </tr> <tr> <td>FAMMSDTN</td> <td>多层空洞transformer，捕捉局部和全局时序关系</td> </tr> </tbody> </table> <h3 id="413-分割精细化">4.1.3 分割精细化</h3>]]></content><author><name></name></author><summary type="html"><![CDATA[Temporal Action Segmentation An Analysis of Modern Techniques]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://zhaoqinlao.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://zhaoqinlao.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://zhaoqinlao.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[<p>May 14, 2024[[read-time]] min read We’re introducing a series of updates across the Gemini family of models, including the new 1.5 Flash, our lightweight model for speed and efficiency, and Project Astra, our vision for the future of AI assistants. In December, we launched our first natively multimodal model Gemini 1.0 in three sizes: Ultra, Pro and Nano. Just a few months later we released 1.5 Pro, with enhanced performance and a breakthrough long context window of 1 million tokens.Developers and enterprise customers have been putting 1.5 Pro to use in incredible ways and finding its long context window, multimodal reasoning capabilities and impressive overall performance incredibly useful.We know from user feedback that some applications need lower latency and a lower cost to serve. This inspired us to keep innovating, so today, we’re introducing Gemini 1.5 Flash: a model that’s lighter-weight than 1.5 Pro, and designed to be fast and efficient to serve at scale.Both 1.5 Pro and 1.5 Flash are available in public preview with a 1 million token context window in Google AI Studio and Vertex AI. And now, 1.5 Pro is also available with a 2 million token context window via waitlist to developers using the API and to Google Cloud customers.We’re also introducing updates across the Gemini family of models, announcing our next generation of open models, Gemma 2, and sharing progress on the future of AI assistants, with Project Astra.Context lengths of leading foundation models compared with Gemini 1.5’s 2 million token capability1.5 Flash is the newest addition to the Gemini model family and the fastest Gemini model served in the API. It’s optimized for high-volume, high-frequency tasks at scale, is more cost-efficient to serve and features our breakthrough long context window.While it’s a lighter weight model than 1.5 Pro, it’s highly capable of multimodal reasoning across vast amounts of information and delivers impressive quality for its size.The new Gemini 1.5 Flash model is optimized for speed and efficiency, is highly capable of multimodal reasoning and features our breakthrough long context window.1.5 Flash excels at summarization, chat applications, image and video captioning, data extraction from long documents and tables, and more. This is because it’s been trained by 1.5 Pro through a process called “distillation,” where the most essential knowledge and skills from a larger model are transferred to a smaller, more efficient model.Read more about 1.5 Flash in our updated Gemini 1.5 technical report, on the Gemini technology page, and learn about 1.5 Flash’s availability and pricing.Over the last few months, we’ve significantly improved 1.5 Pro, our best model for general performance across a wide range of tasks.Beyond extending its context window to 2 million tokens, we’ve enhanced its code generation, logical reasoning and planning, multi-turn conversation, and audio and image understanding through data and algorithmic advances. We see strong improvements on public and internal benchmarks for each of these tasks.1.5 Pro can now follow increasingly complex and nuanced instructions, including ones that specify product-level behavior involving role, format and style. We’ve improved control over the model’s responses for specific use cases, like crafting the persona and response style of a chat agent or automating workflows through multiple function calls. And we’ve enabled users to steer model behavior by setting system instructions.We added audio understanding in the Gemini API and Google AI Studio, so 1.5 Pro can now reason across image and audio for videos uploaded in Google AI Studio. And we’re now integrating 1.5 Pro into Google products, including Gemini Advanced and in Workspace apps.Read more about 1.5 Pro in our updated Gemini 1.5 technical report and on the Gemini technology page.Gemini Nano is expanding beyond text-only inputs to include images as well. Starting with Pixel, applications using Gemini Nano with Multimodality will be able to understand the world the way people do — not just through text, but also through sight, sound and spoken language.Read more about Gemini 1.0 Nano on Android.Today, we’re also sharing a series of updates to Gemma, our family of open models built from the same research and technology used to create the Gemini models.We’re announcing Gemma 2, our next generation of open models for responsible AI innovation. Gemma 2 has a new architecture designed for breakthrough performance and efficiency, and will be available in new sizes.The Gemma family is also expanding with PaliGemma, our first vision-language model inspired by PaLI-3. And we’ve upgraded our Responsible Generative AI Toolkit with LLM Comparator for evaluating the quality of model responses.Read more on the Developer blog.As part of Google DeepMind’s mission to build AI responsibly to benefit humanity, we’ve always wanted to develop universal AI agents that can be helpful in everyday life. That’s why today, we’re sharing our progress in building the future of AI assistants with Project Astra (advanced seeing and talking responsive agent).To be truly useful, an agent needs to understand and respond to the complex and dynamic world just like people do — and take in and remember what it sees and hears to understand context and take action. It also needs to be proactive, teachable and personal, so users can talk to it naturally and without lag or delay.While we’ve made incredible progress developing AI systems that can understand multimodal information, getting response time down to something conversational is a difficult engineering challenge. Over the past few years, we’ve been working to improve how our models perceive, reason and converse to make the pace and quality of interaction feel more natural.Building on Gemini, we’ve developed prototype agents that can process information faster by continuously encoding video frames, combining the video and speech input into a timeline of events, and caching this information for efficient recall.By leveraging our leading speech models, we also enhanced how they sound, giving the agents a wider range of intonations. These agents can better understand the context they’re being used in, and respond quickly, in conversation.With technology like this, it’s easy to envision a future where people could have an expert AI assistant by their side, through a phone or glasses. And some of these capabilities are coming to Google products, like the Gemini app and web experience, later this year.We’ve made incredible progress so far with our family of Gemini models, and we’re always striving to advance the state-of-the-art even further. By investing in a relentless production line of innovation, we’re able to explore new ideas at the frontier, while also unlocking the possibility of new and exciting Gemini use cases.Learn more about Gemini and its capabilities. Your information will be used in accordance with Google’s privacy policy.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      Done. Just one step more.
    
      Check your inbox to confirm your subscription.
    You are already subscribed to our newsletter.
    You can also subscribe with a
    different email address
    
    .
    
  Let’s stay in touch. Get the latest news from Google in your inbox.
          Follow Us
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://zhaoqinlao.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://zhaoqinlao.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://zhaoqinlao.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[<h3>External Posts on Your al-folio Blog</h3> <p>If you prefer publishing blog posts on medium.com or other external sources, starting version v0.5.0, <a href="https://github.com/alshedivat/al-folio">al-folio</a> lets you to display your external posts in the blog feed of your website! 🎉🎉</p> <p>Configuring external sources of super simple. After upgrading to v0.5.0, just add the following section to your _config.yml:</p> <pre>external_sources:<br />  - name: medium.com  # name of the source (arbitrary string)<br />    rss_url: <a href="https://medium.com/@al-folio/feed">https://medium.com/@&lt;your-medium-username&gt;/feed</a></pre> <p>The example above adds your medium.com blog post feed as an external source. But you can add arbitrary RSS feeds as sources.</p> <p>Any questions or suggestions? 👉 Start <a href="https://github.com/alshedivat/al-folio/discussions">a discussion on GitHub</a>!</p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b60a1d241a0a" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry></feed>